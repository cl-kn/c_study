char str[3] = {'A', 'B', 127};
    int count;

    for (count = 0; count <= 2; count++)
    {
        printf("str[%d]: address = %x\n", count, &str[count]);
    }

上記コードで、出力結果の16進数の値が、１づつ増加しているのは
char型が１バイトのため。
int型の場合は４バイトなので、４ずつ増える

「ポインタの意義」
メモリアドレスを格納できる変数であり、直接メモリアドレスにアクセスできる。（遠隔から変数の内容を操作するイメージ）

********************************************
int *po, var;
var = 10101;
po = &var;

printf("ポインタに格納されている内容 = %d\n",*po);
printf("ポインタに格納されている内容 = %x",po);
********************************************

・ここで、ポインタ変数を参照する際に注意する
*po と po の違い

*po・・・・メモリアドレスの内容を参照する（中身の値）
po・・・・格納されているメモリアドレスを指す

元の変数をポインタを通して参照することを、「間接参照」という

********************************************
int *po, var;
var = 100;
po = &var;

*po = 1010;
printf("変数varの値 = %d", var);    // 1010
********************************************

・出力が 1010 なのは、変数varのアドレスを格納しているポインタ変数po から、間接参照により、値が上書きされたから。
    *po = 1010;
